%	\iffalse meta-comment
%
%	Copyright (C) 2020 by Brian W. Mulligan <bwmulligan@astronaos.com>
% -----------------------------------------------------------
%
% This file may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.3c of this license
% or (at your option) any later version. The latest version of this
% license is in:
%
% http://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of LaTeX
% version 2006/05/20 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{exam-random.dtx}
%</driver>


%<package>\NeedsTeXFormat{LaTeX2e}[1994/06/01]
%<package> \ProvidesPackage{exam-random}
%<*package>
	[2020/01/27 v1.0.0 Exam multiple choice randomizer]
%</package>
%<package> \RequirePackage{tikz}
%<package>\ProcessOptions\relax
%<package>\usetikzlibrary{calc,math}
%<package>\@ifclassloaded{exam}{\def\er@c@exam{1}}{\def\er@c@noexam{1}}
%<*driver>
\documentclass{ltxdoc}
\usepackage{xcolor}
\usepackage{mdframed}
\usepackage{exam-random}
\usepackage[backref]{hyperref}
\usepackage{amssymb}
\usepackage[inline]{enumitem}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\OnlyDescription
\begin{document}
\DocInput{exam-random.dtx}
\PrintChanges
\PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v1.0.0}{2020/01/27}{Initial version}
%
% \GetFileInfo{exam-random.dtx}
% \DeclareRobustCommand{\fileversion}{v1.0}
% \DeclareRobustCommand{\filedate}{2020/01/26}
%
% \DoNotIndex{\DeclareRobustCommand,\newenvironment,\DeclareRobustCommand,
%  \left,\right,\textbf,\mathrm,\ensuremath,\units@separator,\expandafter,\,
%  \@ifnextchar, \Alph, \begin, \bgroup, \choice, \CorrectChoice, \detokenize,
%  \else, \end, \fi, \if, \ifcase, \ifx, \item, \newcommand, \or, \relax, 
%  \RequirePackage, \square, \specialenvironments, \tikzmath, \undefined}
%  
%
% \title{The \textsf{exam-random} package\thanks{This document corresponds to%
%  \textsf{exam-random}~\fileversion, dated \filedate.}}
% \author{Brian W. Mulligan \\ \texttt{bwmulligan@astronaos.com}}
%
% \maketitle
% \setlength{\parindent}{0em}
% \setlength{\parskip}{1em}
%
% \newenvironment{example}{\begin{mdframed}[backgroundcolor=orange!25]%
%    \small\texttt}{\end{mdframed}}
% \newenvironment{exampleDisplay}{\begin{mdframed}[backgroundcolor=blue!25]}%
%    {\end{mdframed}}
% \newenvironment{questions}{\begin{enumerate}}{\end{enumerate}}
% \newenvironment{choices}{\begin{enumerate}[label=\Alph*.]}{\end{enumerate}}
% \newenvironment{oneparchoices}{\begin{enumerate}[label=\Alph*.]}{\end{enumerate}}
% \newenvironment{checkboxes}{\begin{enumerate}[label=$\square$]}{\end{enumerate}}
% \newenvironment{oneparcheckboxes}{\begin{enumerate}[label=$\square$]}{\end{enumerate}}
% \DeclareRobustCommand{\question}{\item}
% \DeclareRobustCommand{\choice}{\item}
% \DeclareRobustCommand{\CorrectChoice}{\item}

%
% \section{Introduction}
%
%
% This package consists of several macros that can scramble the answer choices
% for multiple choice questions.
% It is intended for use with the |exam| class, but may also be used
% stand-alone. When used stand-along, the |amssymb| and |enumitem| packages
% are required.
%
% \section{Randomization}
%
% To scramble the choices, pseudo random numbers are used, generated via the
% |tikz| function |rand|. If you run latex multiple times to get labels to
% cross reference, each time you run it a new random seed may be used, leading
% to the questions changing order in a way that you don't want them to.
%
% To prevent this, you should use an explicity defined random seed. This can
% also make sure that the order of the answers appears the same in the solution
% and the exam itself (assuming you are using the |exam| class with the 
% |[answers]| option.
%
% To specify the random seed, at the top of your file add
% |\pgfmathsetseed\{<#>}| (where 
% $\langle$\#$\rangle$ is an integer supplied by you).
%
%
% \section{Warning about braces}
%
% The macros used to generate the random choices accept a varying number of
% arguments, and use some tricky \LaTeX code internally to figure out how
% many arguments there are. They do this by looking for a \{ as the first 
% character after a previous answer choice. If it finds one, it will
% process it as an answer choice, up to the fifth answer choice. This can lead
% to unexpected behavior if you enclose some code in a scope.
% 
% To avoid this, just make sure that any text immediately after the
% choices does not begin a new scope, or if it does there is a empty line
% after the |\choicesScrambled{...}{...}...| line.
%
% \section{Macros}
%
% \DescribeMacro{\choicesScrambled}
% |\choicesScrambled| macro takes up to five arguments that contain the
% possible answers to a question, then prints them scrambled.
%
% The first argument must be the correct answer. 
% The other four arguments are the remaining incorrect answers.
% Two answers (a correct choice and an incorrect choice) are manditory, the 
% remaining three are optional, but an empty argument will appear as an empty
% choice.
%
% For example, two arguments appear as follows:
% \begin{example}
% \textbackslash question Is the sky blue?
% \textbackslash choicesScrambled\{yes\}\{no\}
% \end{example}
% \begin{exampleDisplay}
% \begin{questions}
% \question Is the sky blue?
% \choicesScrambled{yes}{no}
% \end{questions}
% \end{exampleDisplay}
% If an unnecessary, blank third choice is given, you end up with
% \begin{example}
% \textbackslash question Is the sky blue?
% \textbackslash choicesScrambled\{yes\}\{no\}\{\}
% \end{example}
% \begin{exampleDisplay}
% \begin{questions}
% \question Is the sky blue?
% \choicesScrambled{yes}{no}{}
% \end{questions}
% \end{exampleDisplay}
% In essence, any argument given to |\choicesScrambled| will result in a blank
% choice.
%
% The text for the choice can be complex (e.g. include graphics, etc).
% The only limitation anything requested as verbatim will not appear correctly.
% Instead of verbatim, use \textbackslash textsc{...}
%
% \DescribeMacro{\oneparchoicesScrambled}
% |\oneparchoicesScrambled| is identical to |\choicesScrambled| but the choices
% will appear in the stream of the text instead of as a list on several lines.
% For example,
% \begin{example}
% \textbackslash question How many answer choices does this question have?\textbackslash \textbackslash \\
% \textbackslash oneparchoicesScrambled\{One\}\{Two\}\{Three\}\{Four\}\{Five\}
% \end{example}
% \begin{exampleDisplay}
% \begin{questions}
% \question How many answer choices does this question have?\\
% \oneparchoicesScrambled{One}{Two}{Three}{Four}{Five}
% \end{questions}
% \end{exampleDisplay}
%
% \DescribeMacro{\checkboxesScrambled}
% |\checkboxesScrambled| is identical to |\choicesScrambled| but the choices
% will have a checkbox in front of them instead of a letter choice.
% For example,
% \begin{example}
% \textbackslash question How many answer choices does this question have?\\
% \textbackslash checkboxesScrambled\{One\}\{Two\}\{Three\}\{Four\}\{Five\}
% \end{example}
% \begin{exampleDisplay}
% \begin{questions}
% \question How many answer choices does this question have?
% \checkboxesScrambled{One}{Two}{Three}{Four}{Five}
% \end{questions}
% \end{exampleDisplay}
%
% \DescribeMacro{\oneparcheckboxesScrambled}
% |\checkboxesScrambled| is identical to |\oneparchoicesScrambled| but the 
% choices will have a checkbox in front of them instead of a letter choice.
% For example,
% \begin{example}
% \textbackslash question How many answer choices does this question have? \textbackslash \textbackslash \\
% \textbackslash oneparcheckboxesScrambled\{One\}\{Two\}\{Three\}\{Four\}\{Five\}
% \end{example}
% \begin{exampleDisplay}
% \begin{questions}
% \question How many answer choices does this question have? \\
% \oneparcheckboxesScrambled{One}{Two}{Three}{Four}{Five}
% \end{questions}
% \end{exampleDisplay}


% \StopEventually{}
%
%\iffalse
%<*package>
%\fi
\makeatletter
%\iffalse
%</package>
%\fi
%
% 
% \section{Implementation}
% 
% \subsection{Special environments and macros}
%
% To accomodate instances when users don't wish to use the exam class, these
% environments and macros are set up to allow use of the scramble choices
% macros seamlessly.
%\iffalse
%<*package>
%\fi
% \begin{macro}{\specialenvironments}
%    \begin{macrocode}
\ifx\er@c@noexam\undefined
%    \end{macrocode}
% Definitions for when the user is using the exam class.
%    \begin{macrocode}
\newenvironment{EReChoices}%
{\begin{choices}}%
{\end{choices}}
\newenvironment{EReOneparchoices}%
{\begin{oneparchoices}}%
{\end{oneparchoices}}
\newenvironment{EReCheckboxes}%
{\begin{checkboxes}}%
{\end{checkboxes}}
\newenvironment{EReOneparcheckboxes}%
{\begin{oneparcheckboxes}}%
{\end{oneparcheckboxes}}
\DeclareRobustCommand{\er@choice}{\choice}
\DeclareRobustCommand{\er@CorrectChoice}{\CorrectChoice}
\else
%    \end{macrocode}
% Definitions for when the user is NOT using the exam class.
%    \begin{macrocode}
\RequirePackage{amssymb}
\RequirePackage[inline]{enumitem}
\newenvironment{EReChoices}%
%    \end{macrocode}
% When not in the exam class, for the choices environment, use the enumerate
%  environment with the labels set as A., B., etc.
%    \begin{macrocode}
	{\begin{enumerate}[label=\Alph*.]}%
	{\end{enumerate}}
\newenvironment{EReOneparchoices}%
%    \end{macrocode}
% When not in the exam class, for the oneparchoices environment, use the 
% enumerate* environment with the labels set as A., B., etc.
%    \begin{macrocode}
	{\begin{enumerate*}[label=\Alph*.]}%
	{\end{enumerate*}}
\newenvironment{EReCheckboxes}%
%    \end{macrocode}
% When not in the exam class, for the checkboxes environment, use the enumerate
%  environment with the labels set as $\square$ (\$ \textbackslash square \$).
%    \begin{macrocode}
	{\begin{enumerate}[label=$\square$]}%
	{\end{enumerate}}
%    \end{macrocode}
% When not in the exam class, for the oneparchoices environment, use the 
% enumerate* environment with the labels set as A., B., etc.
%    \begin{macrocode}
\newenvironment{EReOneparcheckboxes}%
	{\begin{enumerate*}[label=$\square$]}%
	{\end{enumerate*}}
%    \end{macrocode}
% When not in the exam class, choices just use \item
%    \begin{macrocode}
\DeclareRobustCommand{\er@choice}{\item}
\DeclareRobustCommand{\er@CorrectChoice}{\item}
\fi
%    \end{macrocode}
%\end{macro}
%\iffalse
%</package>
%\fi

%
% \subsection{The worker}
%
% The worker |\er@ScrambledChoicesWorker| does the actual work of scrambling
% the answers.
%\iffalse
%<*package>
%\fi
%\begin{macro}{\er@getEanswer}
%    \begin{macrocode}
\newcommand{\er@ScrambledChoicesWorker}[5]{ {%
% Here we create macros for each choice. 
% These will be scrambled in the later sections.
%    \begin{macrocode}
\def\er@cAA{\er@CorrectChoice #1}
\def\er@cAB{\er@choice #2}
\def\er@cAC{\er@choice #3}
\def\er@cAD{\er@choice #4}
\def\er@cAE{\er@choice #5}
%    \end{macrocode}
% Define some tikz variables for facrotial digits.
% These will be used to do the scrambling
%    \begin{macrocode}
\tikzmath{
		integer \firstChoice;
		integer \secondChoice;
		integer \thirdChoice;
		integer \fourthChoice;
		\firstChoice = 0;
		\secondChoice = 0;
		\thirdChoice = 0;
		\fourthChoice = 0;
}
%    \end{macrocode}
% Generate a random number. The range is dependent upon how many choices there
% are. We then will fill in the factorial digits based on the random number
% to do the scrambling.
%    \begin{macrocode}
\if\relax\detokenize{#3}\relax
	\tikzmath{
%    \end{macrocode}
% Only two choices. Random integer from 0-1.
%    \begin{macrocode}
		\variant=floor(rand + 1.0);
		\firstChoice = round(floor(mod(\variant,2.0)));
	}
\else
\if\relax\detokenize{#4}\relax
%    \end{macrocode}
% Three choices: random integer from 0-5.
%    \begin{macrocode}
	\tikzmath{
		\variant=floor((rand + 1.0) * 3.0);
		\firstChoice = round(floor(\variant / 2.0));
		\secondChoice = round(floor(mod(\variant,2.0)));
	}
\else
\if\relax\detokenize{#5}\relax
%    \end{macrocode}
% Four choices: random integer from 0-23.
%    \begin{macrocode}
	\tikzmath{
		\variant=floor((rand + 1.0) * 12.0);
		\firstChoice = round(floor(\variant / 6.0)));
		\secondChoice = round(floor(mod(\variant,6.0) / 2.0));
		\thirdChoice = round(floor(mod(\variant,2.0)));
	}
\else
%    \end{macrocode}
% Five choices: random integer from 0-120.
%    \begin{macrocode}
	\tikzmath{
		\variant=floor((rand + 1.0) * 60.0);
		\firstChoice = round(floor(\variant / 24.0)));
		\secondChoice = round(floor(mod(\variant,24.0) / 6.0));
		\thirdChoice = round(floor(mod(\variant,6.0) / 2.0));
		\fourthChoice = round(floor(mod(\variant,2.0)));
	}
\fi \fi \fi
%    \end{macrocode}
% The first factorial digit identifies which swap to do. This swap results
% in the first choice and one other choice swapping places.
%    \begin{macrocode}
	\ifcase \firstChoice
%    \end{macrocode}
% Swap A $\leftrightarrow$ A
%    \begin{macrocode}
		\def\er@cBA{\er@cAA}
		\def\er@cBB{\er@cAB}
		\def\er@cBC{\er@cAC}
		\def\er@cBD{\er@cAD}
		\def\er@cBE{\er@cAE}
	\or
%    \end{macrocode}
% Swap A $\leftrightarrow$ B
%    \begin{macrocode}
		\def\er@cBA{\er@cAB}
		\def\er@cBB{\er@cAA}
		\def\er@cBC{\er@cAC}
		\def\er@cBD{\er@cAD}
		\def\er@cBE{\er@cAE}
	\or
%    \end{macrocode}
% Swap A $\leftrightarrow$ C
%    \begin{macrocode}
		\def\er@cBA{\er@cAC}
		\def\er@cBB{\er@cAB}
		\def\er@cBC{\er@cAA}
		\def\er@cBD{\er@cAD}
		\def\er@cBE{\er@cAE}
	\or
%    \end{macrocode}
% Swap A $\leftrightarrow$ D
%    \begin{macrocode}
		\def\er@cBA{\er@cAD}
		\def\er@cBB{\er@cAB}
		\def\er@cBC{\er@cAC}
		\def\er@cBD{\er@cAA}
		\def\er@cBE{\er@cAE}
	\else
%    \end{macrocode}
% Swap A $\leftrightarrow$ E
%    \begin{macrocode}
		\def\er@cBA{\er@cAE}
		\def\er@cBB{\er@cAB}
		\def\er@cBC{\er@cAC}
		\def\er@cBD{\er@cAD}
		\def\er@cBE{\er@cAA}
	\fi
%    \end{macrocode}
% The second factorial digit identifies the next swap to do. This swap results
% in the second choice and one later choice swapping places.
%    \begin{macrocode}
	\ifcase\secondChoice
%    \end{macrocode}
% Swap B $\leftrightarrow$ B
%    \begin{macrocode}
		\def\er@cCA{\er@cBA}
		\def\er@cCB{\er@cBB}
		\def\er@cCC{\er@cBC}
		\def\er@cCD{\er@cBD}
		\def\er@cCE{\er@cBE}
	\or
%    \end{macrocode}
% Swap B $\leftrightarrow$ C
%    \begin{macrocode}
		\def\er@cCA{\er@cBA}
		\def\er@cCB{\er@cBC}
		\def\er@cCC{\er@cBB}
		\def\er@cCD{\er@cBD}
		\def\er@cCE{\er@cBE}
	\or
%    \end{macrocode}
% Swap B $\leftrightarrow$ D
%    \begin{macrocode}
		\def\er@cCA{\er@cBA}
		\def\er@cCB{\er@cBD}
		\def\er@cCC{\er@cBC}
		\def\er@cCD{\er@cBB}
		\def\er@cCE{\er@cBE}
	\else
%    \end{macrocode}
% Swap B $\leftrightarrow$ E
%    \begin{macrocode}
		\def\er@cCA{\er@cBA}
		\def\er@cCB{\er@cBE}
		\def\er@cCC{\er@cBC}
		\def\er@cCD{\er@cBD}
		\def\er@cCE{\er@cBB}
	\fi
%    \end{macrocode}
% The third factorial digit identifies the next swap to do. This swap results
% in the third choice and one later choice swapping places.
%    \begin{macrocode}
	\ifcase\thirdChoice
%    \end{macrocode}
% Swap C $\leftrightarrow$ C
%    \begin{macrocode}
		\def\er@cDA{\er@cCA}
		\def\er@cDB{\er@cCB}
		\def\er@cDC{\er@cCC}
		\def\er@cDD{\er@cCD}
		\def\er@cDE{\er@cCE}
	\or
%    \end{macrocode}
% Swap C $\leftrightarrow$ D
%    \begin{macrocode}
		\def\er@cDA{\er@cCA}
		\def\er@cDB{\er@cCB}
		\def\er@cDC{\er@cCD}
		\def\er@cDD{\er@cCC}
		\def\er@cDE{\er@cCE}
	\else
%    \end{macrocode}
% Swap C $\leftrightarrow$ E
%    \begin{macrocode}
		\def\er@cDA{\er@cCA}
		\def\er@cDB{\er@cCB}
		\def\er@cDC{\er@cCE}
		\def\er@cDD{\er@cCD}
		\def\er@cDE{\er@cCC}
	\fi
	\ifcase\fourthChoice
%    \end{macrocode}
% Swap D $\leftrightarrow$ D
%    \begin{macrocode}
		\def\er@cEA{\er@cDA}
		\def\er@cEB{\er@cDB}
		\def\er@cEC{\er@cDC}
		\def\er@cED{\er@cDD}
		\def\er@cEE{\er@cDE}
	\else
%    \end{macrocode}
% Swap D $\leftrightarrow$ E
%    \begin{macrocode}
		\def\er@cEA{\er@cDA}
		\def\er@cEB{\er@cDB}
		\def\er@cEC{\er@cDC}
		\def\er@cED{\er@cDE}
		\def\er@cEE{\er@cDD}
	\fi
%    \end{macrocode}
% Actually generate the choices based on the above swaps.
% Only display choices that exist.
%    \begin{macrocode}
	\begin{\er@e@choiceEnvType}
		\er@cEA
		\er@cEB
	\if\relax\detokenize{#3}\relax
		\relax
	\else
		\er@cEC
		\if\relax\detokenize{#4}\relax
			\relax
		\else
			\er@cED
			\if\relax\detokenize{#5}\relax
				\relax
			\else
				\er@cEE
			\fi
		\fi
	\fi
	\end{\er@e@choiceEnvType}
	}
}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%
%\iffalse
%<*package>
%\fi
%\begin{macro}{\er@getEanswer}
% The |\er@getEanswer| macro gobbles up a fifth answer choice and calls the
% scrambled choices worker.
%    \begin{macrocode}
\newcommand{\er@getEanswer}[1]{\def\er@ChoiceE{#1}%
 \er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{\er@ChoiceC}{\er@ChoiceD}{\er@ChoiceE}}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%
%\iffalse
%<*package>
%\fi
%\begin{macro}{\er@getDanswer}
% The |\er@getDanswer| macro gobbles up a fourth answer choice and checks to see
% if a fifth answer is provided. If not, it calls the scrambled choice worker
% with the four answers.
%    \begin{macrocode}
\newcommand{\er@getDanswer}[1]{\def\er@ChoiceD{#1}%
 \@ifnextchar\bgroup{ \er@getEanswer}{%
 \er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{\er@ChoiceC}{\er@ChoiceD}{}}}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%
%\iffalse
%<*package>
%\fi
%\begin{macro}{\er@getCanswer}
% The |\er@getCanswer| macro gobbles up a third answer choice and checks to see
% if a fourth answer is provided. If not, it calls the scrambled choice worker
% with the three answers.
%    \begin{macrocode}
\newcommand{\er@getCanswer}[1]{\def\er@ChoiceC{#1}%
 \@ifnextchar\bgroup{ \er@getDanswer}{ %
\er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{\er@ChoiceC}{}{}}}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%
%\iffalse
%<*package>
%\fi
%\begin{macro}{\choicesScrambled}
% The |\choicesScrambled| macro is the main macro for users. It can be called
% with two or more answers. If more than two is provided, |\er@getCanswer| will
% be invoked to gobble up the additional answers. If not, 
% |\er@ScrambledChoicesWorker| is called with the two answers provided.
%    \begin{macrocode}
\newcommand{\choicesScrambled}[2]{%
		\def\er@e@choiceEnvType{EReChoices}%
		\def\er@Answer{#1}%
		\def\er@ChoiceB{#2}%
		\@ifnextchar\bgroup{\er@getCanswer}{%
\er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{}{}{}}
}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%

%\iffalse
%<*package>
%\fi
%\begin{macro}{\checkboxesScrambled}
% The |\checkboxesScrambled| macro is identical to the |\choicesScrambled| 
% macro, except that is dispays checkboxes instead of letters for the choices.
%    \begin{macrocode}
\newcommand{\checkboxesScrambled}[2]{%
		\def\er@e@choiceEnvType{EReCheckboxes}%
		\def\er@Answer{#1}%
		\def\er@ChoiceB{#2}%
		\@ifnextchar\bgroup{\er@getCanswer}{%
\er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{}{}{}}
}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%

%\iffalse
%<*package>
%\fi
%\begin{macro}{\choicesScrambled}
% The |\choicesScrambled| macro is the main macro for users. It can be called
% with two or more answers. If more than two is provided, |\er@getCanswer| will
% be invoked to gobble up the additional answers. If not, 
% |\er@ScrambledChoicesWorker| is called with the two answers provided.
%    \begin{macrocode}
\newcommand{\oneparchoicesScrambled}[2]{%
		\def\er@e@choiceEnvType{EReOneparchoices}%
		\def\er@Answer{#1}%
		\def\er@ChoiceB{#2}%
		\@ifnextchar\bgroup{\er@getCanswer}{%
\er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{}{}{}}
}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%

%\iffalse
%<*package>
%\fi
%\begin{macro}{\oneparcheckboxesScrambled}
% The |\oneparcheckboxesScrambled| macro is identical to the 
% |\oneparchoicesScrambled| macro, except that is dispays checkboxes 
% instead of letters for the choices.
%    \begin{macrocode}
\newcommand{\oneparcheckboxesScrambled}[2]{%
		\def\er@e@choiceEnvType{EReOneparcheckboxes}%
		\def\er@Answer{#1}%
		\def\er@ChoiceB{#2}%
		\@ifnextchar\bgroup{\er@getCanswer}{%
\er@ScrambledChoicesWorker{\er@Answer}{\er@ChoiceB}{}{}{}}
}
%    \end{macrocode}
% \end{macro}
%\iffalse
%</package>
%\fi
%

%\iffalse
%<*package>
%\fi
\makeatother
%\iffalse
%</package>
%\fi


%Finale
